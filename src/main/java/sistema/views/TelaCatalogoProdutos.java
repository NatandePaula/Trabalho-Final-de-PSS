/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package sistema.views;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import java.util.ArrayList;
import sistema.daos.ProdutoDAO;
import sistema.daos.ProdutoDAOImpl;
import sistema.models.Produto;

/**
 *
 * @author Djhenny
 */
public class TelaCatalogoProdutos extends javax.swing.JInternalFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(TelaCatalogoProdutos.class.getName());
    
    // DAO para acesso aos dados
    private ProdutoDAO produtoDAO;
    
    // Dados dos produtos
    private List<Produto> todosProdutos;
    private List<Produto> produtosFiltrados;
    private int paginaAtual = 1;
    private static final int PRODUTOS_POR_PAGINA = 6;
    
    // Componentes de interface
    private JPanel[] paineisProduto;
    private JLabel[] labelsProduto;
    private JLabel[] labelsPreco;
    private JLabel[] labelsCategoria;
    private JLabel[] labelsEstado;
    private JLabel[] labelsImpacto;

    /**
     * Creates new form TelaCatalogoProdutos
     */
    public TelaCatalogoProdutos() {
        produtoDAO = new ProdutoDAOImpl();
        initComponents();
        configurarTela();
        configurarEventos();
        
        // Aguardar a interface ser exibida antes de carregar produtos
        SwingUtilities.invokeLater(() -> {
            carregarProdutos();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBuscarProdutos = new javax.swing.JTextField();
        cmbCategoria = new javax.swing.JComboBox<>();
        cmbPreco = new javax.swing.JComboBox<>();
        cmbEstado = new javax.swing.JComboBox<>();
        cmbOrdenar = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnFiltroVestuario = new javax.swing.JButton();
        btnFiltroCalcados = new javax.swing.JButton();
        btnFiltroBolsas = new javax.swing.JButton();
        btnFiltroTodos = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtProdutosEncontrados = new javax.swing.JTextField();
        painelProdutos = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnAnterior = new javax.swing.JButton();
        btnProximo = new javax.swing.JButton();
        lblPaginaAtual = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        lblImpactoAmbiental = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sistema de Economia Circular - Cat√°logo de Produtos");
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18));
        jLabel1.setForeground(new java.awt.Color(0, 102, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("‚ôªÔ∏è SISTEMA DE ECONOMIA CIRCULAR ‚ôªÔ∏è");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14));
        jLabel2.setForeground(new java.awt.Color(0, 51, 153));
        jLabel2.setText("üîç PESQUISAR E FILTRAR:");

        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Vestu√°rio", "Cal√ßados", "Bolsas", "Acess√≥rios" }));

        cmbPreco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "At√© R$ 50", "R$ 50 - R$ 100", "R$ 100 - R$ 200", "Acima de R$ 200" }));

        cmbEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Excelente", "Bom", "Regular", "Usado" }));

        cmbOrdenar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Relev√¢ncia", "Menor Pre√ßo", "Maior Pre√ßo", "Melhor Avalia√ß√£o", "Menor Impacto CO‚ÇÇ" }));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12));
        jLabel3.setText("FILTROS R√ÅPIDOS:");

        btnFiltroVestuario.setBackground(new java.awt.Color(0, 102, 0));
        btnFiltroVestuario.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltroVestuario.setText("üëï VESTU√ÅRIO");

        btnFiltroCalcados.setBackground(new java.awt.Color(0, 51, 153));
        btnFiltroCalcados.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltroCalcados.setText("üëü CAL√áADOS");

        btnFiltroBolsas.setBackground(new java.awt.Color(153, 51, 0));
        btnFiltroBolsas.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltroBolsas.setText("üëú BOLSAS");

        btnFiltroTodos.setBackground(new java.awt.Color(102, 102, 102));
        btnFiltroTodos.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltroTodos.setText("‚ôªÔ∏è TODOS");

        jLabel4.setText("Resultados:");

        txtProdutosEncontrados.setEditable(false);
        txtProdutosEncontrados.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        painelProdutos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        painelProdutos.setLayout(new java.awt.GridLayout(2, 4, 10, 10));

        jLabel5.setText("P√ÅGINA:");

        btnAnterior.setText("‚óÄ Anterior");
        btnAnterior.setEnabled(false);

        btnProximo.setText("Pr√≥ximo ‚ñ∂");

        lblPaginaAtual.setText("1");

        btnVoltar.setBackground(new java.awt.Color(153, 153, 153));
        btnVoltar.setForeground(new java.awt.Color(255, 255, 255));
        btnVoltar.setText("‚Üê Voltar ao Login");

        lblImpactoAmbiental.setFont(new java.awt.Font("Segoe UI", 1, 12));
        lblImpactoAmbiental.setForeground(new java.awt.Color(0, 102, 0));
        lblImpactoAmbiental.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImpactoAmbiental.setText("üå± IMPACTO AMBIENTAL TOTAL: -0 kg CO‚ÇÇe evitados");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        
        // Layout Horizontal simplificado
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnVoltar)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(txtBuscarProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(cmbPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(cmbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addGap(10, 10, 10)
                .addComponent(btnFiltroVestuario)
                .addGap(10, 10, 10)
                .addComponent(btnFiltroCalcados)
                .addGap(10, 10, 10)
                .addComponent(btnFiltroBolsas)
                .addGap(10, 10, 10)
                .addComponent(btnFiltroTodos)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addGap(10, 10, 10)
                .addComponent(txtProdutosEncontrados, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(painelProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addGap(10, 10, 10)
                .addComponent(btnAnterior)
                .addGap(10, 10, 10)
                .addComponent(lblPaginaAtual)
                .addGap(10, 10, 10)
                .addComponent(btnProximo)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblImpactoAmbiental, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        
        // Layout Vertical simplificado
        layout.setVerticalGroup(
            layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(10, 10, 10)
                .addComponent(btnVoltar)
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBuscarProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnFiltroVestuario)
                    .addComponent(btnFiltroCalcados)
                    .addComponent(btnFiltroBolsas)
                    .addComponent(btnFiltroTodos))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtProdutosEncontrados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(painelProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(btnAnterior)
                    .addComponent(lblPaginaAtual)
                    .addComponent(btnProximo))
                .addGap(15, 15, 15)
                .addComponent(lblImpactoAmbiental)
                .addContainerGap(20, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // M√©todo para configurar a apar√™ncia da tela
    private void configurarTela() {
        // JInternalFrame n√£o precisa de setLocationRelativeTo nem setSize
        // Esses s√£o configurados pelo MDI
        
        // Inicializar arrays de componentes
        paineisProduto = new JPanel[PRODUTOS_POR_PAGINA];
        labelsProduto = new JLabel[PRODUTOS_POR_PAGINA];
        labelsPreco = new JLabel[PRODUTOS_POR_PAGINA];
        labelsCategoria = new JLabel[PRODUTOS_POR_PAGINA];
        labelsEstado = new JLabel[PRODUTOS_POR_PAGINA];
        labelsImpacto = new JLabel[PRODUTOS_POR_PAGINA];
        
        // Configurar painel de produtos
        configurarPainelProdutos();
    }
    
    private void configurarPainelProdutos() {
        // Configurar layout do painel
        painelProdutos.setLayout(new GridLayout(2, 3, 10, 10));
        painelProdutos.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        painelProdutos.setPreferredSize(new Dimension(800, 300));
        painelProdutos.setMinimumSize(new Dimension(800, 300));
        
        // Criar e adicionar pain√©is de produtos
        for (int i = 0; i < PRODUTOS_POR_PAGINA; i++) {
            paineisProduto[i] = criarPainelProduto(i);
            painelProdutos.add(paineisProduto[i]);
        }
        
        // For√ßar atualiza√ß√£o
        painelProdutos.revalidate();
        painelProdutos.repaint();
        
        // Exibir produtos de exemplo imediatamente
        exibirProdutosExemplo();
    }
    
    private void exibirProdutosExemplo() {
        // Criar produtos de exemplo para teste visual
        for (int i = 0; i < Math.min(6, PRODUTOS_POR_PAGINA); i++) {
            if (paineisProduto[i] != null) {
                labelsProduto[i].setText("Produto Exemplo " + (i + 1));
                labelsCategoria[i].setText("Categoria " + (i % 3 == 0 ? "Vestu√°rio" : i % 3 == 1 ? "Cal√ßados" : "Bolsas"));
                labelsPreco[i].setText("R$ " + (25.50 + i * 10));
                labelsEstado[i].setText("Estado: " + (i % 2 == 0 ? "Novo" : "Bom"));
                labelsImpacto[i].setText("‚ôªÔ∏è Impacto: " + (i % 3 == 0 ? "Baixo" : i % 3 == 1 ? "M√©dio" : "Alto"));
                
                paineisProduto[i].setVisible(true);
            }
        }
        
        // For√ßar atualiza√ß√£o
        painelProdutos.revalidate();
        painelProdutos.repaint();
    }
    
    private JPanel criarPainelProduto(int indice) {
        JPanel painel = new JPanel();
        painel.setLayout(new BoxLayout(painel, BoxLayout.Y_AXIS));
        painel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200)),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        painel.setBackground(Color.WHITE);
        painel.setPreferredSize(new Dimension(200, 150));
        
        // Nome do produto
        labelsProduto[indice] = new JLabel("Produto " + (indice + 1));
        labelsProduto[indice].setFont(new Font("Segoe UI", Font.BOLD, 12));
        labelsProduto[indice].setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Categoria
        labelsCategoria[indice] = new JLabel("Categoria");
        labelsCategoria[indice].setFont(new Font("Segoe UI", Font.PLAIN, 10));
        labelsCategoria[indice].setForeground(new Color(100, 100, 100));
        labelsCategoria[indice].setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Pre√ßo
        labelsPreco[indice] = new JLabel("R$ 0,00");
        labelsPreco[indice].setFont(new Font("Segoe UI", Font.BOLD, 14));
        labelsPreco[indice].setForeground(new Color(0, 102, 0));
        labelsPreco[indice].setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Estado
        labelsEstado[indice] = new JLabel("Estado: Novo");
        labelsEstado[indice].setFont(new Font("Segoe UI", Font.PLAIN, 10));
        labelsEstado[indice].setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Impacto ambiental
        labelsImpacto[indice] = new JLabel("‚ôªÔ∏è Impacto: Baixo");
        labelsImpacto[indice].setFont(new Font("Segoe UI", Font.PLAIN, 10));
        labelsImpacto[indice].setForeground(new Color(0, 153, 0));
        labelsImpacto[indice].setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // Adicionar componentes ao painel
        painel.add(labelsProduto[indice]);
        painel.add(Box.createVerticalStrut(5));
        painel.add(labelsCategoria[indice]);
        painel.add(Box.createVerticalStrut(5));
        painel.add(labelsPreco[indice]);
        painel.add(Box.createVerticalStrut(5));
        painel.add(labelsEstado[indice]);
        painel.add(Box.createVerticalStrut(5));
        painel.add(labelsImpacto[indice]);
        
        return painel;
    }
    
        private void carregarProdutos() {
        try {
            todosProdutos = produtoDAO.listarTodos();
            if (todosProdutos == null) {
                todosProdutos = new ArrayList<>();
            }
            
            // Se n√£o h√° produtos no banco, criar dados de teste
            if (todosProdutos.isEmpty()) {
                criarProdutosTeste();
            }
            
            produtosFiltrados = new ArrayList<>(todosProdutos);
            atualizarExibicao();
            atualizarContador();
            
            // For√ßar atualiza√ß√£o da interface
            SwingUtilities.invokeLater(() -> {
                revalidate();
                repaint();
            });
        } catch (Exception e) {
            logger.severe("Erro ao carregar produtos: " + e.getMessage());
            
            // Criar produtos de teste em caso de erro
            criarProdutosTeste();
            todosProdutos = new ArrayList<>();
            produtosFiltrados = new ArrayList<>();
        }
    }
    
    private void criarProdutosTeste() {
        todosProdutos = new ArrayList<>();
        
        // Produto 1
        Produto p1 = new Produto();
        p1.setId(1L);
        p1.setNome("Camiseta B√°sica Algod√£o");
        p1.setCategoria("Vestu√°rio");
        p1.setMarca("EcoFashion");
        p1.setPrecoVenda(45.90);
        p1.setNivelDefeito("Novo");
        p1.setMciEstimado(0.3);
        todosProdutos.add(p1);
        
        // Produto 2
        Produto p2 = new Produto();
        p2.setId(2L);
        p2.setNome("T√™nis Esportivo Reciclado");
        p2.setCategoria("Cal√ßados");
        p2.setMarca("GreenShoes");
        p2.setPrecoVenda(89.90);
        p2.setNivelDefeito("Bom");
        p2.setMciEstimado(0.5);
        todosProdutos.add(p2);
        
        // Produto 3
        Produto p3 = new Produto();
        p3.setId(3L);
        p3.setNome("Bolsa Feminina Couro Sint√©tico");
        p3.setCategoria("Bolsas");
        p3.setMarca("EcoBags");
        p3.setPrecoVenda(120.00);
        p3.setNivelDefeito("Excelente");
        p3.setMciEstimado(0.2);
        todosProdutos.add(p3);
        
        // Produto 4
        Produto p4 = new Produto();
        p4.setId(4L);
        p4.setNome("Cal√ßa Jeans Sustent√°vel");
        p4.setCategoria("Vestu√°rio");
        p4.setMarca("EcoDenim");
        p4.setPrecoVenda(75.50);
        p4.setNivelDefeito("Regular");
        p4.setMciEstimado(0.6);
        todosProdutos.add(p4);
        
        // Produto 5
        Produto p5 = new Produto();
        p5.setId(5L);
        p5.setNome("Sand√°lia Havaiana Ecol√≥gica");
        p5.setCategoria("Cal√ßados");
        p5.setMarca("EcoFlip");
        p5.setPrecoVenda(35.00);
        p5.setNivelDefeito("Novo");
        p5.setMciEstimado(0.1);
        todosProdutos.add(p5);
        
        // Produto 6
        Produto p6 = new Produto();
        p6.setId(6L);
        p6.setNome("Mochila Escolar Reciclada");
        p6.setCategoria("Bolsas");
        p6.setMarca("EcoSchool");
        p6.setPrecoVenda(65.00);
        p6.setNivelDefeito("Bom");
        p6.setMciEstimado(0.4);
        todosProdutos.add(p6);
        
        System.out.println("Produtos de teste criados: " + todosProdutos.size());
    }
    
    private void atualizarExibicao() {
        int inicio = (paginaAtual - 1) * PRODUTOS_POR_PAGINA;
        int fim = Math.min(inicio + PRODUTOS_POR_PAGINA, produtosFiltrados.size());
        
        // Limpar todos os pain√©is
        for (int i = 0; i < PRODUTOS_POR_PAGINA; i++) {
            if (inicio + i < produtosFiltrados.size()) {
                Produto produto = produtosFiltrados.get(inicio + i);
                exibirProduto(i, produto);
                paineisProduto[i].setVisible(true);
            } else {
                paineisProduto[i].setVisible(false);
            }
        }
        
        // Atualizar controles de pagina√ß√£o
        btnAnterior.setEnabled(paginaAtual > 1);
        btnProximo.setEnabled(fim < produtosFiltrados.size());
        
        int totalPaginas = produtosFiltrados.isEmpty() ? 1 : 
            (produtosFiltrados.size() - 1) / PRODUTOS_POR_PAGINA + 1;
        lblPaginaAtual.setText("P√°gina " + paginaAtual + " de " + totalPaginas);
    }
    
    private void exibirProduto(int indice, Produto produto) {
        if (produto != null) {
            labelsProduto[indice].setText(produto.getNome());
            labelsCategoria[indice].setText(produto.getCategoria());
            labelsPreco[indice].setText(String.format("R$ %.2f", produto.getPrecoVenda()));
            labelsEstado[indice].setText("Estado: " + (produto.getNivelDefeito() != null ? produto.getNivelDefeito() : "Novo"));
            
            // Calcular impacto ambiental baseado no MCI
            String impacto = "Baixo";
            if (produto.getMciEstimado() != null) {
                if (produto.getMciEstimado() > 0.7) {
                    impacto = "Alto";
                } else if (produto.getMciEstimado() > 0.4) {
                    impacto = "M√©dio";
                }
            }
            labelsImpacto[indice].setText("‚ôªÔ∏è Impacto: " + impacto);
        }
    }
    
    private void atualizarContador() {
        txtProdutosEncontrados.setText(produtosFiltrados.size() + " produtos encontrados");
    }
    
    private void buscarProdutos() {
        String termoBusca = txtBuscarProdutos.getText().trim().toLowerCase();
        String categoria = (String) cmbCategoria.getSelectedItem();
        String preco = (String) cmbPreco.getSelectedItem();
        String estado = (String) cmbEstado.getSelectedItem();
        
        produtosFiltrados = new ArrayList<>();
        
        for (Produto produto : todosProdutos) {
            if (produtoAtendeFiltros(produto, termoBusca, categoria, preco, estado)) {
                produtosFiltrados.add(produto);
            }
        }
        
        paginaAtual = 1;
        atualizarExibicao();
        atualizarContador();
    }
    
    private boolean produtoAtendeFiltros(Produto produto, String termoBusca, String categoria, 
                                       String preco, String estado) {
        // Filtro por termo de busca
        if (!termoBusca.isEmpty()) {
            if (!produto.getNome().toLowerCase().contains(termoBusca) &&
                !produto.getCategoria().toLowerCase().contains(termoBusca) &&
                !produto.getMarca().toLowerCase().contains(termoBusca)) {
                return false;
            }
        }
        
        // Filtro por categoria
        if (!categoria.equals("Todas") && !produto.getCategoria().equals(categoria)) {
            return false;
        }
        
        // Filtro por pre√ßo
        if (!preco.equals("Todos")) {
            double precoProduto = produto.getPrecoVenda();
            switch (preco) {
                case "At√© R$ 50":
                    if (precoProduto > 50) return false;
                    break;
                case "R$ 50 - R$ 100":
                    if (precoProduto < 50 || precoProduto > 100) return false;
                    break;
                case "R$ 100 - R$ 200":
                    if (precoProduto < 100 || precoProduto > 200) return false;
                    break;
                case "Acima de R$ 200":
                    if (precoProduto <= 200) return false;
                    break;
            }
        }
        
        // Filtro por estado
        if (!estado.equals("Todos")) {
            String estadoProduto = produto.getNivelDefeito() != null ? produto.getNivelDefeito() : "Novo";
            if (!estadoProduto.equals(estado)) {
                return false;
            }
        }
        
        return true;
    }

    // M√©todo para configurar os eventos dos bot√µes
    private void configurarEventos() {
        // Busca em tempo real
        txtBuscarProdutos.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {}
            
            @Override
            public void keyPressed(KeyEvent e) {}
            
            @Override
            public void keyReleased(KeyEvent e) {
                buscarProdutos();
            }
        });
        
        // Filtros autom√°ticos
        cmbCategoria.addActionListener(e -> buscarProdutos());
        cmbPreco.addActionListener(e -> buscarProdutos());
        cmbEstado.addActionListener(e -> buscarProdutos());
        cmbOrdenar.addActionListener(e -> ordenarProdutos());
        
        btnVoltar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                voltarParaLogin();
            }
        });

        btnAnterior.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (paginaAtual > 1) {
                    paginaAtual--;
                    atualizarExibicao();
                }
            }
        });

        btnProximo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int totalPaginas = (produtosFiltrados.size() - 1) / PRODUTOS_POR_PAGINA + 1;
                if (paginaAtual < totalPaginas) {
                    paginaAtual++;
                    atualizarExibicao();
                }
            }
        });

        btnFiltroVestuario.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbCategoria.setSelectedItem("Vestu√°rio");
                buscarProdutos();
            }
        });

        btnFiltroCalcados.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbCategoria.setSelectedItem("Cal√ßados");
                buscarProdutos();
            }
        });

        btnFiltroBolsas.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbCategoria.setSelectedItem("Bolsas");
                buscarProdutos();
            }
        });

        btnFiltroTodos.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cmbCategoria.setSelectedItem("Todas");
                cmbPreco.setSelectedItem("Todos");
                cmbEstado.setSelectedItem("Todos");
                buscarProdutos();
            }
        });
    }
    
    private void ordenarProdutos() {
        String ordenacao = (String) cmbOrdenar.getSelectedItem();
        
        switch (ordenacao) {
            case "Menor Pre√ßo":
                produtosFiltrados.sort((p1, p2) -> Double.compare(p1.getPrecoVenda(), p2.getPrecoVenda()));
                break;
            case "Maior Pre√ßo":
                produtosFiltrados.sort((p1, p2) -> Double.compare(p2.getPrecoVenda(), p1.getPrecoVenda()));
                break;
            case "Melhor Avalia√ß√£o":
                // Por enquanto, ordenar por nome (implementar avalia√ß√£o depois)
                produtosFiltrados.sort((p1, p2) -> p1.getNome().compareTo(p2.getNome()));
                break;
            case "Menor Impacto CO‚ÇÇ":
                produtosFiltrados.sort((p1, p2) -> {
                    Double mci1 = p1.getMciEstimado() != null ? p1.getMciEstimado() : 0.0;
                    Double mci2 = p2.getMciEstimado() != null ? p2.getMciEstimado() : 0.0;
                    return Double.compare(mci1, mci2);
                });
                break;
            default: // Relev√¢ncia
                // Manter ordem original
                break;
        }
        
        paginaAtual = 1;
        atualizarExibicao();
    }

    // M√©todo para voltar ao login
    private void voltarParaLogin() {
        try {
            this.dispose();
            // Em JInternalFrame, apenas fechamos a janela
            // O MDI principal continua aberto
        } catch (Exception ex) {
            logger.severe("Erro ao fechar cat√°logo: " + ex.getMessage());
            JOptionPane.showMessageDialog(this, "Erro ao fechar cat√°logo: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Esta classe agora √© executada dentro do MDI
        // N√£o deve ser executada independentemente
        JOptionPane.showMessageDialog(null, 
            "Esta tela deve ser aberta atrav√©s do sistema MDI principal.", 
            "Informa√ß√£o", 
            JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnFiltroBolsas;
    private javax.swing.JButton btnFiltroCalcados;
    private javax.swing.JButton btnFiltroTodos;
    private javax.swing.JButton btnFiltroVestuario;
    private javax.swing.JButton btnProximo;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JComboBox<String> cmbCategoria;
    private javax.swing.JComboBox<String> cmbEstado;
    private javax.swing.JComboBox<String> cmbOrdenar;
    private javax.swing.JComboBox<String> cmbPreco;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblImpactoAmbiental;
    private javax.swing.JLabel lblPaginaAtual;
    private javax.swing.JPanel painelProdutos;
    private javax.swing.JTextField txtBuscarProdutos;
    private javax.swing.JTextField txtProdutosEncontrados;
    // End of variables declaration//GEN-END:variables
}
